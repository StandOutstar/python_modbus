# import array
import struct
FunCodeDict = {0x03: '读取', 0x06: '设置', 0x10: '设置'}
RegisterBlockDict = {0x00: '状态监控区', 0x01: '状态监控区', 0x10: '分解动作区', 0x11: '分解动作区', 0x20: '连贯动作区', 0x30: '系统参数区'}
StateBlock_01_Dict = {0x00: '脖子前后向电机状态', 0x01: '脖子前后向电机角度',
                      0x02: '脖子左右向电机状态', 0x03: '脖子左右向电机角度',
                      0x04: '左肩膀前后向电机状态', 0x05: '左肩膀前后向电机角度',
                      0x06: '右肩膀前后向电机状态', 0x07: '右肩膀前后向电机角度',
                      0x08: '左肩膀左右向电机状态', 0x09: '左肩膀左右向电机角度',
                      0x0A: '右肩膀左右向电机状态', 0x0B: '右肩膀左右向电机角度',
                      0x0C: '左臂转向电机状态', 0x0D: '左臂转向电机角度',
                      0x0E: '右臂转向电机状态', 0x0F: '右臂转向电机角度',
                      0x10: '左肘前后向电机状态', 0x11: '左肘前后向电机角度',
                      0x12: '右肘前后向电机状态', 0x13: '右肘前后向电机角度',
                      0x14: '左前臂转向电机状态', 0x15: '左前臂转向电机角度',
                      0x16: '右前臂转向电机状态', 0x17: '右前臂转向电机角度',
                      0x18: '左腕前后向电机状态', 0x19: '左腕前后向电机角度',
                      0x1A: '右腕前后向电机状态', 0x1B: '右腕前后向电机角度',
                      0x1C: '左腕左右向电机状态', 0x1D: '左腕左右向电机角度',
                      0x1E: '右腕左右向电机状态', 0x1F: '右腕左右向电机角度',
                      0x20: '左大腿根左右向电机状态', 0x21: '左大腿根左右向电机角度',
                      0x22: '右大腿根左右向电机状态', 0x23: '右大腿根左右向电机角度',
                      0x24: '左大腿根前后向电机状态', 0x25: '左大腿根前后向电机角度',
                      0x26: '右大腿根前后向电机状态', 0x27: '右大腿根前后向电机角度',
                      0x28: '左膝盖前后向电机状态', 0x29: '左膝盖前后向电机角度',
                      0x2A: '右膝盖前后向电机状态', 0x2B: '右膝盖前后向电机角度',
                      0x2C: '左脚腕前后向电机状态', 0x2D: '左脚腕前后向电机角度',
                      0x2E: '右脚腕前后向电机状态', 0x2F: '右脚腕前后向电机角度',
                      0x30: '左脚腕左右向电机状态', 0x31: '左脚腕左右向电机角度',
                      0x32: '右脚腕左右向电机状态', 0x33: '右脚腕左右向电机角度',
                      0x34: '左大腿转向电机状态', 0x35: '左大腿转向电机角度',
                      0x36: '右大腿转向电机状态', 0x37: '右大腿转向电机角度',
                      0x38: '左睛状态', 0x39: '左睛角度/RGB',
                      0x3A: '右睛状态', 0x3B: '右睛角度/RGB',
                      0x3C: '腰部电机状态', 0x3D: '腰部电机角度',
                      0x3E: '下巴电机状态', 0x3F: '下巴电机角度'}

StateBlock_02_Dict = {0x00: '软件版本号', 0x01: '硬件版本号',
                      0x02: '硬件序列号低位', 0x03: '硬件序列号高位',
                      0x04: '红外探头状态', 0x05: '超声波状态',
                      0x06: '下位机状态', 0x07: '左手感应',
                      0x08: '右手感应', 0x09: '头部触摸',
                      0x0A: '惯性单元X轴角度', 0x0B: '惯性单元Y轴角度',
                      0x0C: '惯性单元Z轴角度', 0x0D: '惯性单元X轴加速度',
                      0x0E: '惯性单元Y轴加速度', 0x0F: '惯性单元Z轴加速度',
                      0x10: 'X轴角速度', 0x11: 'Y轴角速度',
                      0x12: 'Z轴角速度', 0x13: 'X轴磁场',
                      0x14: 'Y轴磁场', 0x15: 'Z轴磁场',
                      0x16: '姿态识别', 0x17: '系列动作运行状态',
                      0x18: '最大存储容量', 0x19: '剩余文件数量',
                      0x1A: '当前可用文件号', 0x1B: '当前可用记录号',
                      0x1C: '已保存表情数量', 0x1D: '已保存系列动作数量',
                      0x1E: '运行模式', 0x1F: '随机数低位',
                      0x20: '随机数高位', 0x21: '二维码01',
                      0x22: '二维码02', 0x23: '二维码03',
                      0x24: '二维码04', 0x25: '二维码05',
                      0x26: '二维码06'}
SingleactionblockDict = {
    0x1000: '脖子前后向电机状态', 0x1001: '脖子前后向电机角度',
    0x1002: '脖子左右向电机状态', 0x1003: '脖子左右向电机角度',
    0x1004: '左肩膀前后向电机状态', 0x1005: '左肩膀前后向电机角度',
    0x1006: '右肩膀前后向电机状态', 0x1007: '右肩膀前后向电机角度',
    0x1008: '左肩膀左右向电机状态', 0x1009: '左肩膀左右向电机角度',
    0x100A: '右肩膀左右向电机状态', 0x100B: '右肩膀左右向电机角度',
    0x100C: '左臂转向电机状态', 0x100D: '左臂转向电机角度',
    0x100E: '右臂转向电机状态', 0x100F: '右臂转向电机角度',
    0x1010: '左肘前后向电机状态', 0x1011: '左肘前后向电机角度',
    0x1012: '右肘前后向电机状态', 0x1013: '右肘前后向电机角度',
    0x1014: '左前臂转向电机状态', 0x1015: '左前臂转向电机角度',
    0x1016: '右前臂转向电机状态', 0x1017: '右前臂转向电机角度',
    0x1018: '左腕前后向电机状态', 0x1019: '左腕前后向电机角度',
    0x101A: '右腕前后向电机状态', 0x101B: '右腕前后向电机角度',
    0x101C: '左腕左右向电机状态', 0x101D: '左腕左右向电机角度',
    0x101E: '右腕左右向电机状态', 0x101F: '右腕左右向电机角度',
    0x1020: '左大腿根左右向电机状态', 0x1021: '左大腿根左右向电机角度',
    0x1022: '右大腿根左右向电机状态', 0x1023: '右大腿根左右向电机角度',
    0x1024: '左大腿根前后向电机状态', 0x1025: '左大腿根前后向电机角度',
    0x1026: '右大腿根前后向电机状态', 0x1027: '右大腿根前后向电机角度',
    0x1028: '左膝盖前后向电机状态', 0x1029: '左膝盖前后向电机角度',
    0x102A: '右膝盖前后向电机状态', 0x102B: '右膝盖前后向电机角度',
    0x102C: '左脚腕前后向电机状态', 0x102D: '左脚腕前后向电机角度',
    0x102E: '右脚腕前后向电机状态', 0x102F: '右脚腕前后向电机角度',
    0x1030: '左脚腕左右向电机状态', 0x1031: '左脚腕左右向电机角度',
    0x1032: '右脚腕左右向电机状态', 0x1033: '右脚腕左右向电机角度',
    0x1034: '左大腿转向电机状态', 0x1035: '左大腿转向电机角度',
    0x1036: '右大腿转向电机状态', 0x1037: '右大腿转向电机角度',
    0x1038: '左睛状态', 0x1039: '左睛角度/RGB',
    0x103A: '右睛状态', 0x103B: '右睛角度/RGB',
    0x103C: '腰部电机状态', 0x103D: '腰部电机角度',
    0x103E: '下巴电机状态', 0x103F: '下巴电机角度',
    0x1100: '左耳部LED_01', 0x1101: '左耳部LED_02',
    0x1102: '右耳部LED_01', 0x1103: '右耳部LED_02',
    0x1104: '眼睑部件'
}
ContinusActionBlockDict = {
    0x2000: '并发动作控制字',
    0x2001: 'A动作编号', 0x2002: 'A动作参数',
    0x2003: 'B动作编号', 0x2004: 'B动作参数',
    0x2005: 'C动作编号', 0x2006: 'C动作参数',
    0x200F: 'LED控制字',
    0x2010: '效果编号',  0x2011: '效果参数1',
    0x2012: '效果参数2', 0x2013: '效果参数3',
    0x2014: '表情控制字',
    0x2015: '表情编号',  0x2016: '表情参数1',
    0x2017: '表情参数2', 0x2018: '表情参数3'
}
SystemBlockDict = {
    0x3000: '电机复位',     0x3001: '电源管理',
    0x3002: '耳部LED开关',  0x3003: '固件升级请求',
    0x3004: '充电开关',     0x3005: '超声波安全距离',
    0x3006: '红外安全距离', 0x3007: '保存数据请求',
    0x3008: '控制密码开关', 0x3009: '密码高位',
    0x300A: '密码低位',     0x300B: '禁用外设电量阈值',
    0x300C: '主板打断状态', 0x300D: '波特率_01',
    0x300E: '波特率_02',    0x300F: '屏幕参数'
}

def calculate(modbus_request):
    # request is a bytearray like bytearray(b'\x01\x06\x10\x00\x00\x08\x8c\xcc')
    # print(modbus_request)
    # s = array.array('B', modbus_request[1])
    s = modbus_request[1]
    (slaveid, funcode) = struct.unpack('>BB', s[0:2])  # 拆包
    regaddress = struct.unpack('>BB', s[2:4])  # 拆包
    print(modbus_request[1])
    if s[2] == 0x00:  # StateBlock_01_Dict
        print("收到", FunCodeDict[s[1]], RegisterBlockDict[s[2]], StateBlock_01_Dict[s[3]], "起始地址:", regaddress, "读取长度"+str(s[5]))
    elif s[2] == 0x01:  # StateBlock_02_Dict
        print("收到", FunCodeDict[s[1]], RegisterBlockDict[s[2]], StateBlock_02_Dict[s[3]], "起始地址:", regaddress, "读取长度"+str(s[5]))
    else:
        print("收到", FunCodeDict[s[1]], RegisterBlockDict[s[2]], "设置长度"+str(s[5]))
